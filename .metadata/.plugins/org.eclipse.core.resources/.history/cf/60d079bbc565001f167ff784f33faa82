package com.motorPM.service;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.motorPM.domain.dto.SigdataDTO;
import com.motorPM.persistence.MemberRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ChartService {

	private final MemberRepository mr;
	private final SigdataDTO dto;

	public List<SigdataDTO> getSigdata(Object sig) {

		ObjectMapper mapper = new ObjectMapper();
		// Object를 JsonNode로 변환
		JsonNode jsonData = mapper.convertValue(sig, JsonNode.class);

		String asset_name = jsonData.path("asset_name").asText();
		int startTime = jsonData.path("start_at").asInt();
		int endTime = jsonData.path("end_at").asInt();

		// cols 배열을 추출
        JsonNode colsNode = jsonData.path("cols");

        // cols 배열의 각 요소를 String으로 변환
        List<String> colsList = StreamSupport.stream(colsNode.spliterator(), false)
            .map(col -> col.asText()) // 각 JsonNode를 String으로 변환
            .collect(Collectors.toList());
        // 변환된 결과를 문자열로 변환
        String colsString = String.join(", ", colsList);
        
		System.out.println("\n에셋이름 : " + asset_name + "\n시작시간 : " + startTime + "\n종료시간 : "+ endTime);
		System.out.println("컬럼들 : "+colsString);
		
		
		List<Object[]> result = mr.getSigDataJoin(colsString, asset_name, startTime, endTime);
		
		System.out.println(result.size());
		System.out.println(result.get(0));
		System.out.println(result.get(1));
		System.out.println(result.get(2));
		System.out.println(result.get(3));
		List<SigdataDTO> sigdataList = result.stream()
	            .map(data -> mapToSigdataDTO(data)) // 각 Object[]를 SigdataDTO로 변환
	            .collect(Collectors.toList());
		return sigdataList;
	}
	
	private SigdataDTO mapToSigdataDTO(Object[] row) {
        // Assuming the order of columns in the result matches the SigdataDTO fields
        return SigdataDTO.builder()
            .asset_id((String) row[0]) // 0번째 요소가 asset_id
            .created_at((Integer) row[1]) // 1번째 요소가 created_at
            .temperature((Float) row[2]) // 2번째 요소가 temperature
            .voltage((Float) row[3]) // 3번째 요소가 voltage
            .rms_x((Float) row[4]) // 4번째 요소가 rms_x
            .rms_y((Float) row[5]) // 5번째 요소가 rms_y
            .rms_z((Float) row[6]) // 6번째 요소가 rms_z
            .rms_xyz((Float) row[7]) // 7번째 요소가 rms_xyz
            .vel_rms_x((Float) row[8]) // 8번째 요소가 vel_rms_x
            .vel_rms_y((Float) row[9]) // 9번째 요소가 vel_rms_y
            .vel_rms_z((Float) row[10]) // 10번째 요소가 vel_rms_z
            .vel_rms_xyz((Float) row[11]) // 11번째 요소가 vel_rms_xyz
            .skewness_x((Float) row[12]) // 12번째 요소가 skewness_x
            .skewness_y((Float) row[13]) // 13번째 요소가 skewness_y
            .skewness_z((Float) row[14]) // 14번째 요소가 skewness_z
            .vel_skewness_x((Float) row[15]) // 15번째 요소가 vel_skewness_x
            .vel_skewness_y((Float) row[16]) // 16번째 요소가 vel_skewness_y
            .vel_skewness_z((Float) row[17]) // 17번째 요소가 vel_skewness_z
            .kurtosis_x((Float) row[18]) // 18번째 요소가 kurtosis_x
            .kurtosis_y((Float) row[19]) // 19번째 요소가 kurtosis_y
            .kurtosis_z((Float) row[20]) // 20번째 요소가 kurtosis_z
            .vel_kurtosis_x((Float) row[21]) // 21번째 요소가 vel_kurtosis_x
            .vel_kurtosis_y((Float) row[22]) // 22번째 요소가 vel_kurtosis_y
            .vel_kurtosis_z((Float) row[23]) // 23번째 요소가 vel_kurtosis_z
            .crest_factor_x((Float) row[24]) // 24번째 요소가 crest_factor_x
            .crest_factor_y((Float) row[25]) // 25번째 요소가 crest_factor_y
            .crest_factor_z((Float) row[26]) // 26번째 요소가 crest_factor_z
            .vel_crest_factor_x((Float) row[27]) // 27번째 요소가 vel_crest_factor_x
            .vel_crest_factor_y((Float) row[28]) // 28번째 요소가 vel_crest_factor_y
            .vel_crest_factor_z((Float) row[29]) // 29번째 요소가 vel_crest_factor_z
            .peak_x((Float) row[30]) // 30번째 요소가 peak_x
            .peak_y((Float) row[31]) // 31번째 요소가 peak_y
            .peak_z((Float) row[32]) // 32번째 요소가 peak_z
            .vel_peak_x((Float) row[33]) // 33번째 요소가 vel_peak_x
            .vel_peak_y((Float) row[34]) // 34번째 요소가 vel_peak_y
            .vel_peak_z((Float) row[35]) // 35번째 요소가 vel_peak_z
            .peak2peak_x((Float) row[36]) // 36번째 요소가 peak2peak_x
            .peak2peak_y((Float) row[37]) // 37번째 요소가 peak2peak_y
            .peak2peak_z((Float) row[38]) // 38번째 요소가 peak2peak_z
            .vel_peak2peak_x((Float) row[39]) // 39번째 요소가 vel_peak2peak_x
            .vel_peak2peak_y((Float) row[40]) // 40번째 요소가 vel_peak2peak_y
            .vel_peak2peak_z((Float) row[41]) // 41번째 요소가 vel_peak2peak_z
            .build();
    }

}
