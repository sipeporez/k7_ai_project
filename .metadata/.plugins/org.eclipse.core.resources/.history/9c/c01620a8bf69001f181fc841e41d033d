package com.motorPM.config;

import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class CustomWebSocketHandler extends TextWebSocketHandler {

    // 세션을 사용자 이름으로 관리하기 위한 매핑
    private final Map<String, WebSocketSession> sessions = new ConcurrentHashMap<>();

    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
        Map<String, Object> attributes = session.getAttributes();
        String username = (String) attributes.get("userid");

        if (username != null) {
            // 사용자 이름으로 세션 관리
            sessions.put(username, session);
            System.out.println("Connected: " + username);
        } else {
            session.close(CloseStatus.BAD_DATA); // 사용자 이름이 없으면 연결 종료
        }
    }

    @Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
        // 메시지 처리 로직
        String payload = message.getPayload();
        Map<String, Object> attributes = session.getAttributes();
        String username = (String) attributes.get("username");

        // 메시지를 받았을 때의 처리 예시
        if (username != null) {
            System.out.println("Received message from " + username + ": " + payload);
            // 추가적인 로직 구현
        }
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
        Map<String, Object> attributes = session.getAttributes();
        String username = (String) attributes.get("username");

        if (username != null) {
            sessions.remove(username); // 세션 종료 시 제거
    		System.out.println(session + username + " 클라이언트 접속 해제");
        }
    }

    // 추가적인 메서드 (예: 특정 사용자에게 메시지 보내기)
    public void sendMessageToUser(String username, String message) {
        WebSocketSession session = sessions.get(username);
        if (session != null && session.isOpen()) {
            try {
                session.sendMessage(new TextMessage(message));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
