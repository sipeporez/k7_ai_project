package com.motorPM.service;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.persistence.EntityManager;
import jakarta.persistence.Query;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ChartService {

	public String getUserIDFromToken() {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (authentication != null && authentication.isAuthenticated()) {
			return authentication.getName();
		}
		return null;
	}

	private final EntityManager em;

	// 기간과 asset_name, 조회할 컬럼을 받아서 SigData를 조회하는 query
	public List<Map<String, Object>> getSigdataChart(Object sig) {

		ObjectMapper mapper = new ObjectMapper();
		// Object를 JsonNode로 변환
		JsonNode jsonData = mapper.convertValue(sig, JsonNode.class);

		String asset_name = jsonData.path("asset_name").asText();
		int startTime = jsonData.path("start_at").asInt();
		int endTime = jsonData.path("end_at").asInt();

		// cols 배열을 추출
		JsonNode colsNode = jsonData.path("cols");

		// cols 배열의 각 요소를 String으로 변환
		List<String> colsList = StreamSupport.stream(colsNode.spliterator(), false).map(col -> col.asText())
				.collect(Collectors.toList());
		// sql 쿼리문 작성
		String query = "SELECT sg.asset_id, mst.asset_name, created_at, ";
		query += String.join(", ", colsList);
		query += " FROM ics_asset_sigdata sg, ics_asset_mst mst ";
		query += " WHERE sg.asset_id = mst.asset_id ";
		query += " AND mst.asset_name = '" + asset_name + "'";
		query += " AND created_at BETWEEN " + startTime + " AND " + endTime;

		System.out.println(query);
		Query sql = em.createNativeQuery(query);

		@SuppressWarnings("unchecked")
		List<Object[]> results = sql.getResultList();
		List<Map<String, Object>> list = new ArrayList<>();

		// 쿼리 결과를 저장
		for (Object[] result : results) {
			Map<String, Object> map = new LinkedHashMap<>();
			map.put("asset_id", result[0]);
			map.put("asset_name", result[1]);
			map.put("created_at", result[2]);
			// cols에 따라 동적으로 값 추가
			for (int i = 0; i < colsList.size(); i++) {
				map.put(colsList.get(i), result[i + 3]); // 0, 1, 2는 이미 사용했으므로 +3
			}
			list.add(map);
		}
		return list;
	}

	// 기간과 asset_name, 조회할 컬럼을 받아서 bookmark에 저장하는 query
	@Transactional
	public int saveBookmark(Object sig) {

		ObjectMapper mapper = new ObjectMapper();
		// Object를 JsonNode로 변환
		JsonNode jsonData = mapper.convertValue(sig, JsonNode.class);

		String asset_name = jsonData.path("asset_name").asText();
		int startTime = jsonData.path("start_at").asInt();
		int endTime = jsonData.path("end_at").asInt();
		String nickname = jsonData.path("bookmark_name").asText();

		// cols 배열을 추출
		JsonNode colsNode = jsonData.path("cols");

		// cols 배열의 각 요소를 String으로 변환
		List<String> colsList = StreamSupport.stream(colsNode.spliterator(), false)
				.map(col -> col.asText())
				.collect(Collectors.toList());
		
		String cols = String.join(", ", colsList);
		
		String userid = getUserIDFromToken();
		if (userid == null) return HttpStatus.UNAUTHORIZED.value();
		
		String bookmark = "INSERT INTO bookmark (`userid`, `nickname`,`cols`,`asset_name`, `startTime`, `endTime`)"
				+ " VALUES (:userid, :nickname, :cols, :asset_name, :startTime, :endTime);";
		Query sql = em.createNativeQuery(bookmark);
		sql.setParameter("userid", userid);
		sql.setParameter("query", query);
		sql.setParameter("nickname", nickname);
		sql.executeUpdate();

		return HttpStatus.OK.value();
	}
	
	public List<Map<String, Object>> loadBookmark() {
		String userid = getUserIDFromToken();
		String query = "SELECT userid, bookmarks, nickname  FROM bookmark WHERE userid = :userid";
		Query sql = em.createNativeQuery(query);
		sql.setParameter("userid", userid);
		
		@SuppressWarnings("unchecked")
		List<Object[]> results = sql.getResultList();
		List<Map<String, Object>> list = new ArrayList<>();

		// 쿼리 결과를 저장
		for (Object[] result : results) {
			Map<String, Object> map = new LinkedHashMap<>();
			map.put("userid", result[0]);
			map.put("bookmarks", result[1]);
			map.put("nickname", result[2]);
			
			list.add(map);
		}
		return list;
	}
	
//	@Transactional
//	public int deleteBookmark() {
//		
//		
//	}
}
