package com.motorPM.service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.motorPM.domain.dto.SigdataDTO;
import com.motorPM.persistence.MemberRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ChartService {

	private final MemberRepository mr;

	public List<SigdataDTO> getSigdata(Object sig) {

		ObjectMapper mapper = new ObjectMapper();
		// Object를 JsonNode로 변환
		JsonNode jsonData = mapper.convertValue(sig, JsonNode.class);

		String asset_name = jsonData.path("asset_name").asText();
		int startTime = jsonData.path("start_at").asInt();
		int endTime = jsonData.path("end_at").asInt();

		// cols 배열을 추출
		JsonNode colsNode = jsonData.path("cols");

		// cols 배열의 각 요소를 String으로 변환
		List<String> colsList = StreamSupport
				.stream(colsNode.spliterator(), false)
				.map(col -> col.asText()) // 각
				.collect(Collectors.toList());
		// 변환된 결과를 문자열로 변환
		String colsString = String.join(", ", colsList);

		System.out.println("\n에셋이름 : " + asset_name + "\n시작시간 : " + startTime + "\n종료시간 : " + endTime);
		System.out.println("컬럼들 : " + colsString);

		List<Object[]> result = mr.getSigDataJoin(colsString, asset_name, startTime, endTime);

		List<SigdataDTO> sigdataList = new ArrayList<>();

		for (Object[] row : result) {
			// 빌더 객체 생성
			SigdataDTO.SigdataDTOBuilder builder = SigdataDTO.builder();

			for (int i = 0; i < colsList.size(); i++) {
				String colName = colsList.get(i);
				Object value = row[i];

				// 필드 이름을 JavaBean 규칙에 따라 빌더 메서드 이름으로 변환
				String methodName = colName;

				try {
					// 리플렉션을 사용하여 빌더의 메서드를 동적으로 호출
					Method method = SigdataDTO.SigdataDTOBuilder.class.getMethod(methodName, value.getClass());
					method.invoke(builder, value);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			// 완성된 DTO 객체를 리스트에 추가
			sigdataList.add(builder.build());
		}

		return sigdataList;

	}

}
