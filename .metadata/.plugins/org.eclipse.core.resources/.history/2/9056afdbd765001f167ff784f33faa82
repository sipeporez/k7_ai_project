package com.motorPM.service;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.persistence.EntityManager;
import jakarta.persistence.Query;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ChartService {

	private final EntityManager em;

	public List<Map<String, Object>> getSigdata(Object sig) {

		ObjectMapper mapper = new ObjectMapper();
		// Object를 JsonNode로 변환
		JsonNode jsonData = mapper.convertValue(sig, JsonNode.class);

		String asset_name = jsonData.path("asset_name").asText();
		int startTime = jsonData.path("start_at").asInt();
		int endTime = jsonData.path("end_at").asInt();

		// cols 배열을 추출
		JsonNode colsNode = jsonData.path("cols");

		// cols 배열의 각 요소를 String으로 변환
		List<String> colsList = StreamSupport
				.stream(colsNode.spliterator(), false)
				.map(col -> col.asText()) // 각
				.collect(Collectors.toList());
		// sql 쿼리문 작성
		String query = "SELECT sg.asset_id, mst.asset_name, created_at, ";
				query += String.join(", ", colsList);
				query += " FROM ics_asset_sigdata sg, ics_asset_mst mst ";
				query += " WHERE sg.asset_id = mst.asset_id ";
				query += " AND mst.asset_name = '" + asset_name + "'";
				query += " AND created_at BETWEEN " + startTime + " AND " + endTime;
		
		Query sql = em.createNativeQuery(query);
		
		try {
			@SuppressWarnings("unchecked")
			List<Object[]> results = sql.getResultList();
			List<Map<String, Object>> list = new ArrayList<>();
			
			for (Object[] result : results) {
				Map<String, Object> map = new LinkedHashMap<>();
				map.put("asset_id", result[0]);
				map.put("asset_name", result[1]);
				map.put("created_at", result[2]);
				// cols에 따라 동적으로 값 추가
				for (int i = 0; i < colsList.size(); i++) {
					map.put(colsList.get(i), result[i + 3]); // 0, 1, 2는 이미 사용했으므로 +3
				}
				list.add(map);
			}
			return list;
		}catch (Exception e) {
			throw e;
		}
	}
}
