package com.motorPM.service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.motorPM.domain.dto.SigdataDTO;
import com.motorPM.persistence.MemberRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ChartService {

	private final MemberRepository mr;
	private final SigdataDTO dto;

	public List<SigdataDTO> getSigdata(Object sig) {

		ObjectMapper mapper = new ObjectMapper();
		// Object를 JsonNode로 변환
		JsonNode jsonData = mapper.convertValue(sig, JsonNode.class);

		String asset_name = jsonData.path("asset_name").asText();
		int startTime = jsonData.path("start_at").asInt();
		int endTime = jsonData.path("end_at").asInt();

		// cols 배열을 추출
		JsonNode colsNode = jsonData.path("cols");

		// cols 배열의 각 요소를 String으로 변환
		List<String> colsList = StreamSupport.stream(colsNode.spliterator(), false).map(col -> col.asText()) // 각
																												// JsonNode를
																												// String으로
																												// 변환
				.collect(Collectors.toList());
		// 변환된 결과를 문자열로 변환
		String colsString = String.join(", ", colsList);

		System.out.println("\n에셋이름 : " + asset_name + "\n시작시간 : " + startTime + "\n종료시간 : " + endTime);
		System.out.println("컬럼들 : " + colsString);

		List<Object[]> result = mr.getSigDataJoin(colsString, asset_name, startTime, endTime);

		List<SigdataDTO> sigdataList = new ArrayList<>();
		for (Object[] row : result) {
			SigdataDTO dto = new SigdataDTO();

			dto.setAsset_id((String) row[0]);
			dto.setCreated_at((Integer) row[1]);
			dto.setTemperature((Float) row[2]);
			dto.setVoltage((Float) row[3]);
			dto.setRms_x((Float) row[4]);
			dto.setRms_y((Float) row[5]);
			dto.setRms_z((Float) row[6]);
			dto.setRms_xyz((Float) row[7]);
			dto.setVel_rms_x((Float) row[8]);
			dto.setVel_rms_y((Float) row[9]);
			dto.setVel_rms_z((Float) row[10]);
			dto.setVel_rms_xyz((Float) row[11]);
			dto.setSkewness_x((Float) row[12]);
			dto.setSkewness_y((Float) row[13]);
			dto.setSkewness_z((Float) row[14]);
			dto.setVel_skewness_x((Float) row[15]);
			dto.setVel_skewness_y((Float) row[16]);
			dto.setVel_skewness_z((Float) row[17]);
			dto.setKurtosis_x((Float) row[18]);
			dto.setKurtosis_y((Float) row[19]);
			dto.setKurtosis_z((Float) row[20]);
			dto.setVel_kurtosis_x((Float) row[21]);
			dto.setVel_kurtosis_y((Float) row[22]);
			dto.setVel_kurtosis_z((Float) row[23]);
			dto.setCrest_factor_x((Float) row[24]);
			dto.setCrest_factor_y((Float) row[25]);
			dto.setCrest_factor_z((Float) row[26]);
			dto.setVel_crest_factor_x((Float) row[27]);
			dto.setVel_crest_factor_y((Float) row[28]);
			dto.setVel_crest_factor_z((Float) row[29]);
			dto.setPeak_x((Float) row[30]);
			dto.setPeak_y((Float) row[31]);
			dto.setPeak_z((Float) row[32]);
			dto.setVel_peak_x((Float) row[33]);
			dto.setVel_peak_y((Float) row[34]);
			dto.setVel_peak_z((Float) row[35]);
			dto.setPeak2peak_x((Float) row[36]);
			dto.setPeak2peak_y((Float) row[37]);
			dto.setPeak2peak_z((Float) row[38]);
			dto.setVel_peak2peak_x((Float) row[39]);
			dto.setVel_peak2peak_y((Float) row[40]);
			dto.setVel_peak2peak_z((Float) row[41]);

			// SigdataDTO 객체를 리스트에 추가
			sigdataList.add(dto);
		}

		// SigdataDTO 리스트 반환
		return sigdataList;

	}

}
